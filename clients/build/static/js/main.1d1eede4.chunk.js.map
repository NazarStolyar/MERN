{"version":3,"sources":["context/AuthContext.js","hooks/http.hook.js","components/Loader.js","components/Links.js","pages/LinkPage.js","pages/CreatePage.js","components/Linkcart.js","pages/DetailPage.js","pages/AuthPage.js","hooks/message.hook.js","routes.js","hooks/auth.hook.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","UseHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","async","method","body","headers","JSON","stringify","fetch","response","data","json","ok","Error","message","clearError","Loader","style","display","justifyContent","paddingTop","className","Links","links","length","map","link","i","key","_id","from","to","LinksPage","setLink","useContext","getList","Authorization","console","log","useEffect","CreatePage","history","useHistory","auth","window","M","updateTextFields","placeholder","id","type","value","onChange","e","target","onKeyPress","event","push","htmlFor","Linkcart","rel","href","clicks","Date","date","toLocaleDateString","DetailPage","linkId","useParams","getLink","featching","AuthPage","text","toast","html","email","password","form","setForm","changeHandler","name","marginRight","disabled","onClick","UseRoutes","isAuth","path","exact","useAuth","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","Navbar","padding","preventDefault","App","routes","Provider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d1eede4.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nfunction noop () {\n\n}\n\nexport const AuthContext = createContext( {\n    token: null,\n    userId: null,\n    login: noop,\n    logout: noop,\n    isAuthenticated: false,\n});\n","import {useState,  useCallback} from 'react'\n\n\nexport const UseHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n        setLoading(true);\n            try {\n                if (body) {\n                    body = JSON.stringify(body);\n                    headers['Content-Type'] = 'application/json';\n                }\n                const response = await fetch(url, {method, body, headers})\n                const data = response.json();\n\n                if (!response.ok) {\n                    throw new Error(data.message || 'Щось пішло не так');\n                }\n                setLoading(false);\n                return data\n            } catch (e) {\n                setLoading(false);\n                setError(e.message);\n                throw e\n            }\n    }, []);\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError }\n}\n","import React from \"react\";\n\nexport const Loader = () => {\n  return (\n      <div style={{ display: 'flex', justifyContent: 'center', paddingTop: '2rem' }} className=\"preloader-wrapper active\">\n          <div className=\"spinner-layer spinner-red-only\">\n              <div className=\"circle-clipper left\">\n                  <div className=\"circle\"></div>\n              </div>\n              <div className=\"gap-patch\">\n                  <div className=\"circle\"></div>\n              </div>\n              <div className=\"circle-clipper right\">\n                  <div className=\"circle\"></div>\n              </div>\n          </div>\n      </div>\n  )\n};\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport const Links = ( {links} ) => {\n    if (!links.length) {\n        return <p className='center'>У вас немає списків</p>\n    }\n    return (\n        <table>\n            <thead>\n            <tr>\n                <th>№</th>\n                <th>Оргінал</th>\n                <th>Зжата</th>\n                <th>Відкрити</th>\n            </tr>\n            </thead>\n\n            <tbody>\n            {links.map((link, i) => {\n                return (\n                    <tr key={link._id}>\n                        <td>{i + 1}</td>\n                        <td>{link.from}</td>\n                        <td>{link.to}</td>\n                        <td><Link to={`/detail/${link._id}`}>Відкрити</Link></td>\n                    </tr>\n                )\n            })}\n\n            </tbody>\n        </table>\n    )\n}\n","import React, {useCallback, useContext, useEffect, useState} from \"react\";\nimport {AuthContext} from \"../context/AuthContext\";\nimport {UseHttp} from \"../hooks/http.hook\";\nimport {Loader} from \"../components/Loader\";\nimport {Links} from \"../components/Links\";\n\nexport const LinksPage = () => {\n    const [links, setLink] = useState([]);\n    const {token} = useContext(AuthContext);\n    const {request, loading} = UseHttp();\n\n    const getList = useCallback( async () => {\n        try {\n            const data = await request('/api/link', 'GET', null, {\n                Authorization: `Bearer ${token}`\n            })\n            console.log(data);\n            setLink(data);\n\n        } catch (e) {}\n    }, [token, request]);\n\n    useEffect(() => {\n        getList()\n    }, [getList]);\n\n    if (loading) {\n        return <Loader/>\n    }\n\n    return (\n        <>\n            { !loading  && <Links links={links} /> }\n        </>\n    )\n}\n","import React, {useContext, useEffect, useState} from \"react\";\nimport {UseHttp} from \"../hooks/http.hook\";\nimport {AuthContext} from \"../context/AuthContext\";\nimport {useHistory} from 'react-router-dom';\n\nexport const CreatePage = () => {\n    const history = useHistory();\n    const {request} = UseHttp();\n    const auth = useContext(AuthContext);\n    const [link, setLink] = useState('');\n    useEffect(() => {\n        window.M.updateTextFields()\n    }, []);\n\n\n    const  pressHandler = async event => {\n        if (event.key === 'Enter') {\n            try {\n               const data =  await request('/api/link/generate', 'POST', {from: link},  {\n                   Authorization: `Bearer ${auth.token}`\n               })\n                history.push(`/detail/${data.link._id}`)\n            } catch (e) {\n\n            }\n        }\n    };\n\n    return (\n        <div className='row'>\n            <div className=\"col s8 offset-s2\" style={{ paddingTop: '2rem' }}>\n                <div className=\"input-field\">\n                    <input placeholder=\"Вставте силку\"\n                           id=\"link\"\n                           type=\"text\"\n                           value={link}\n                           onChange={e => setLink(e.target.value)}\n                           onKeyPress={pressHandler}\n                           />\n                    <label htmlFor=\"link\">Введіть силку</label>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n","import React from \"react\";\n\nexport const Linkcart = ({ link }) => {\n    return (\n        <>\n            <h2>Силка</h2>\n            <p>Ваши силка: <a target='_blank' rel=\"noopener noreferrer\"  href={link.to}>{ link.to }</a></p>\n            <p>Звітки: <a target='_blank' rel=\"noopener noreferrer\" href={link.from}>{ link.from }</a></p>\n            <p>К-сть кліків по силці: <strong>{ link.clicks }</strong></p>\n            <p>Дата створення: <strong>{ new Date(link.date).toLocaleDateString() }</strong></p>\n\n\n        </>\n    )\n}\n","import React, {useCallback, useContext, useEffect, useState} from \"react\";\nimport {useParams} from 'react-router-dom';\nimport {UseHttp} from \"../hooks/http.hook\";\nimport {AuthContext} from \"../context/AuthContext\";\nimport {Loader} from \"../components/Loader\";\nimport {Linkcart} from \"../components/Linkcart\";\n\nexport const DetailPage = () => {\n    const [link, setLink] = useState(null);\n    const {token} = useContext(AuthContext);\n    const linkId = useParams().id;\n    const {request, loading} = UseHttp();\n\n    const getLink = useCallback(async () => {\n        try {\n            const featching = await request(`/api/link/${linkId}`, 'GET', null, {\n                Authorization: `Bearer ${token}`\n            });\n            setLink(featching);\n        } catch (e) {}\n    }, [token, linkId, request]);\n\n    useEffect(() => {\n        getLink()\n    }, [getLink]);\n\n    if (loading) {\n        return <Loader/>\n    }\n\n    return (\n        <>\n          { !loading && link && <Linkcart link={link}/> }\n        </>\n    )\n}\n","import React, {useContext, useEffect, useState} from \"react\";\nimport {UseHttp} from \"../hooks/http.hook\";\nimport {useMessage} from \"../hooks/message.hook\";\nimport {AuthContext} from \"../context/AuthContext\";\n\nexport const AuthPage = () => {\n    const auth = useContext(AuthContext);\n    const message = useMessage()\n    const {loading, request, error, clearError} = UseHttp();\n    const [form, setForm] = useState({\n        email: '',\n        password: '',\n    })\n\n    const changeHandler = event => {\n        setForm({...form, [event.target.name]: event.target.value })\n    };\n\n    useEffect(() => {\n        message(error);\n        clearError();\n    }, [error, message, clearError]);\n\n    useEffect(() => {\n        window.M.updateTextFields()\n    }, [])\n\n\n    const registerHandler = async () => {\n        try {\n            const data = await request('/api/auth/register', 'POST', {...form});\n            message(data.message);\n\n        } catch (e) {\n\n        }\n    }\n\n    const loginHandler = async () => {\n        try {\n            const data = await request('/api/auth/login', 'POST', {...form});\n            auth.login(data.token, data.userId)\n        } catch (e) {\n\n        }\n    }\n\n    return (\n        <div className='row'>\n           <div className=\"col s6 offset-s3\">\n               <h1>Скороти силку</h1>\n               <div className=\"card blue darken-1\">\n                   <div className=\"card-content white-text\">\n                       <span className=\"card-title\">Авторизація</span>\n                        <div>\n                            <div className=\"input-field\">\n                                <input placeholder=\"Email\"\n                                       id=\"email\"\n                                       type=\"email\"\n                                       name='email'\n                                       onChange={changeHandler}\n                                       value={form.email}\n                                       className=\"validate yellow-input\" />\n                                 <label htmlFor=\"email\">Email</label>\n                            </div>\n                            <div className=\"input-field\">\n                                <input placeholder=\"Password\"\n                                       id=\"password\"\n                                       type=\"password\"\n                                       name='password'\n                                       value={form.password}\n                                       onChange={changeHandler}\n                                       className=\"validate yellow-input\" />\n                                <label htmlFor=\"password\">Password</label>\n                            </div>\n                        </div>\n                   </div>\n                   <div className=\"card-action\">\n                      <button\n                          className='darken-4 yellow btn'\n                          style={{marginRight: 10}}\n                          disabled={loading}\n                          onClick={loginHandler}\n                      >Увійти\n                      </button>\n                       <button\n                           onClick={registerHandler}\n                           disabled={loading}\n                           className='black-text grey lighten-1 btn'>Реєстрація</button>\n                   </div>\n               </div>\n           </div>\n        </div>\n    )\n}\n","import {useCallback} from 'react'\n\nexport const useMessage = () => {\n    return useCallback(text => {\n        if (window.M && text) {\n            window.M.toast({ html: text });\n        }\n     }, [])\n}\n","import React from \"react\";\nimport {Switch, Route, Redirect} from 'react-router-dom'\nimport {LinksPage} from \"./pages/LinkPage\";\nimport {CreatePage} from \"./pages/CreatePage\";\nimport {DetailPage} from \"./pages/DetailPage\";\nimport {AuthPage} from \"./pages/AuthPage\";\n\nexport const UseRoutes = isAuth => {\n    if (isAuth) {\n        return (\n            <Switch>\n                <Route path='/links' exact>\n                    <LinksPage/>\n                </Route>\n                <Route path='/create' exact>\n                    <CreatePage/>\n                </Route>\n                <Route path='/detail/:id'>\n                    <DetailPage/>\n                </Route>\n                <Redirect to='/create'/>\n            </Switch>\n        )\n    }\n    return (\n        <Switch>\n            <Route path='/' exact>\n                <AuthPage/>\n            </Route>\n            <Redirect to='/'/>\n        </Switch>\n    )\n}\n","import {useState, useCallback, useEffect} from 'react'\n\nconst storageName = 'userData'\n\nexport const useAuth = () => {\n    const [token, setToken] = useState(null)\n    const [ready, setReady] = useState(false)\n    const [userId, setUserId] = useState(null)\n\n    const login = useCallback((jwtToken, id) => {\n        setToken(jwtToken)\n        setUserId(id)\n\n        localStorage.setItem(storageName, JSON.stringify({\n            userId: id, token: jwtToken\n        }))\n    }, [])\n\n\n    const logout = useCallback(() => {\n        setToken(null)\n        setUserId(null)\n        localStorage.removeItem(storageName)\n    }, [])\n\n    useEffect(() => {\n        const data = JSON.parse(localStorage.getItem(storageName))\n\n        if (data && data.token) {\n            login(data.token, data.userId)\n        }\n        setReady(true)\n    }, [login])\n\n\n    return { login, logout, token, userId, ready }\n}\n","import React, {useContext} from \"react\";\nimport  {NavLink, useHistory} from 'react-router-dom';\nimport {AuthContext} from \"../context/AuthContext\";\n\nexport const Navbar = () => {\n    const history = useHistory();\n\n    const auth = useContext(AuthContext);\n\n    const logoutHandler = event => {\n        event.preventDefault();\n        auth.logout();\n        history.push('/');\n    };\n    return (\n        <nav>\n            <div className=\"nav-wrapper blue darken-1\" style={{ padding: '0 2rem' }}>\n                <span href=\"/\" className=\"brand-logo\">Скорочення силок</span>\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n                    <li><NavLink to='/create'>Створити</NavLink></li>\n                    <li><NavLink to='/links'>Силки</NavLink></li>\n                    <li><a href='/' onClick={logoutHandler}>Вийти</a></li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n","import React from 'react';\nimport {BrowserRouter} from 'react-router-dom'\nimport 'materialize-css'\nimport {UseRoutes} from \"./routes\";\nimport {useAuth} from \"./hooks/auth.hook\";\nimport {AuthContext} from \"./context/AuthContext\";\nimport {Navbar} from './components/Navbar'\nimport {Loader} from './components/Loader'\n\nfunction App() {\n\n  const {token, login, logout, userId, ready} = useAuth();\n\n  if (!ready) {\n      return <Loader />;\n  }\n  const isAuthenticated =  !!token;\n    const routes = UseRoutes(isAuthenticated);\n  return (\n      <AuthContext.Provider value={{\n          token, login, logout, userId, isAuthenticated\n      }}>\n          <BrowserRouter>\n              {isAuthenticated && <Navbar />}\n              <div className=\"container\">\n                  {routes}\n              </div>\n          </BrowserRouter>\n      </AuthContext.Provider>\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}